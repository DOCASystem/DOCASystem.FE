/* tslint:disable */
/* eslint-disable */
/**
 * DOCA System
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface AddImageAnimalRequest
 */
export interface AddImageAnimalRequest {
  /**
   *
   * @type {File}
   * @memberof AddImageAnimalRequest
   */
  imageUrl: File;
  /**
   *
   * @type {boolean}
   * @memberof AddImageAnimalRequest
   */
  isMain: boolean;
}
/**
 *
 * @export
 * @interface AddImageProductRequest
 */
export interface AddImageProductRequest {
  /**
   *
   * @type {File}
   * @memberof AddImageProductRequest
   */
  imageUrl: File;
  /**
   *
   * @type {boolean}
   * @memberof AddImageProductRequest
   */
  isMain: boolean;
}
/**
 *
 * @export
 * @interface Animal
 */
export interface Animal {
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  description?: string | null;
  /**
   *
   * @type {number}
   * @memberof Animal
   */
  age?: number;
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  sex?: string | null;
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  modifiedAt?: string;
  /**
   *
   * @type {Array<AnimalCategoryRelationship>}
   * @memberof Animal
   */
  animalCategoryRelationship?: Array<AnimalCategoryRelationship> | null;
  /**
   *
   * @type {Array<AnimalImage>}
   * @memberof Animal
   */
  animalImage?: Array<AnimalImage> | null;
}
/**
 *
 * @export
 * @interface AnimalCategory
 */
export interface AnimalCategory {
  /**
   *
   * @type {string}
   * @memberof AnimalCategory
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof AnimalCategory
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof AnimalCategory
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof AnimalCategory
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof AnimalCategory
   */
  modifiedAt?: string;
  /**
   *
   * @type {Array<AnimalCategoryRelationship>}
   * @memberof AnimalCategory
   */
  animalCategoryRelationship?: Array<AnimalCategoryRelationship> | null;
}
/**
 *
 * @export
 * @interface AnimalCategoryRelationship
 */
export interface AnimalCategoryRelationship {
  /**
   *
   * @type {string}
   * @memberof AnimalCategoryRelationship
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof AnimalCategoryRelationship
   */
  animalId?: string;
  /**
   *
   * @type {Animal}
   * @memberof AnimalCategoryRelationship
   */
  animal?: Animal;
  /**
   *
   * @type {string}
   * @memberof AnimalCategoryRelationship
   */
  animalCategoryId?: string;
  /**
   *
   * @type {AnimalCategory}
   * @memberof AnimalCategoryRelationship
   */
  animalCategory?: AnimalCategory;
}
/**
 *
 * @export
 * @interface AnimalCategoryResponse
 */
export interface AnimalCategoryResponse {
  /**
   *
   * @type {string}
   * @memberof AnimalCategoryResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof AnimalCategoryResponse
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof AnimalCategoryResponse
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof AnimalCategoryResponse
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof AnimalCategoryResponse
   */
  modifiedAt?: string;
}
/**
 *
 * @export
 * @interface AnimalCategoryResponseIPaginate
 */
export interface AnimalCategoryResponseIPaginate {
  /**
   *
   * @type {number}
   * @memberof AnimalCategoryResponseIPaginate
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof AnimalCategoryResponseIPaginate
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof AnimalCategoryResponseIPaginate
   */
  total?: number;
  /**
   *
   * @type {number}
   * @memberof AnimalCategoryResponseIPaginate
   */
  totalPages?: number;
  /**
   *
   * @type {Array<AnimalCategoryResponse>}
   * @memberof AnimalCategoryResponseIPaginate
   */
  items?: Array<AnimalCategoryResponse> | null;
}
/**
 *
 * @export
 * @interface AnimalImage
 */
export interface AnimalImage {
  /**
   *
   * @type {string}
   * @memberof AnimalImage
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof AnimalImage
   */
  animalId?: string;
  /**
   *
   * @type {Animal}
   * @memberof AnimalImage
   */
  animal?: Animal;
  /**
   *
   * @type {string}
   * @memberof AnimalImage
   */
  imageUrl?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof AnimalImage
   */
  isMain?: boolean;
}
/**
 *
 * @export
 * @interface AnimalImageResponse
 */
export interface AnimalImageResponse {
  /**
   *
   * @type {string}
   * @memberof AnimalImageResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof AnimalImageResponse
   */
  imageUrl?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof AnimalImageResponse
   */
  isMain?: boolean;
}
/**
 *
 * @export
 * @interface BlogCategoryResponse
 */
export interface BlogCategoryResponse {
  /**
   *
   * @type {string}
   * @memberof BlogCategoryResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof BlogCategoryResponse
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof BlogCategoryResponse
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof BlogCategoryResponse
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof BlogCategoryResponse
   */
  modifiedAt?: string;
}
/**
 *
 * @export
 * @interface BlogCategoryResponseIPaginate
 */
export interface BlogCategoryResponseIPaginate {
  /**
   *
   * @type {number}
   * @memberof BlogCategoryResponseIPaginate
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof BlogCategoryResponseIPaginate
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof BlogCategoryResponseIPaginate
   */
  total?: number;
  /**
   *
   * @type {number}
   * @memberof BlogCategoryResponseIPaginate
   */
  totalPages?: number;
  /**
   *
   * @type {Array<BlogCategoryResponse>}
   * @memberof BlogCategoryResponseIPaginate
   */
  items?: Array<BlogCategoryResponse> | null;
}
/**
 *
 * @export
 * @enum {number}
 */

export const BlogEnum = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;

export type BlogEnum = (typeof BlogEnum)[keyof typeof BlogEnum];

/**
 *
 * @export
 * @interface CartModel
 */
export interface CartModel {
  /**
   *
   * @type {string}
   * @memberof CartModel
   */
  productId?: string;
  /**
   *
   * @type {string}
   * @memberof CartModel
   */
  blogId?: string;
  /**
   *
   * @type {number}
   * @memberof CartModel
   */
  quantity?: number;
}
/**
 *
 * @export
 * @interface CartModelResponse
 */
export interface CartModelResponse {
  /**
   *
   * @type {string}
   * @memberof CartModelResponse
   */
  productId?: string;
  /**
   *
   * @type {string}
   * @memberof CartModelResponse
   */
  blogId?: string;
  /**
   *
   * @type {string}
   * @memberof CartModelResponse
   */
  productName?: string | null;
  /**
   *
   * @type {string}
   * @memberof CartModelResponse
   */
  blogName?: string | null;
  /**
   *
   * @type {string}
   * @memberof CartModelResponse
   */
  productDescription?: string | null;
  /**
   *
   * @type {string}
   * @memberof CartModelResponse
   */
  blogDescription?: string | null;
  /**
   *
   * @type {number}
   * @memberof CartModelResponse
   */
  price?: number;
  /**
   *
   * @type {number}
   * @memberof CartModelResponse
   */
  quantity?: number;
  /**
   *
   * @type {number}
   * @memberof CartModelResponse
   */
  volume?: number;
  /**
   *
   * @type {string}
   * @memberof CartModelResponse
   */
  mainImage?: string | null;
  /**
   *
   * @type {number}
   * @memberof CartModelResponse
   */
  productQuantity?: number;
}
/**
 *
 * @export
 * @interface CategoryResponse
 */
export interface CategoryResponse {
  /**
   *
   * @type {string}
   * @memberof CategoryResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof CategoryResponse
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof CategoryResponse
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof CategoryResponse
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof CategoryResponse
   */
  modifiedAt?: string;
}
/**
 *
 * @export
 * @interface CategoryResponseIPaginate
 */
export interface CategoryResponseIPaginate {
  /**
   *
   * @type {number}
   * @memberof CategoryResponseIPaginate
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof CategoryResponseIPaginate
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof CategoryResponseIPaginate
   */
  total?: number;
  /**
   *
   * @type {number}
   * @memberof CategoryResponseIPaginate
   */
  totalPages?: number;
  /**
   *
   * @type {Array<CategoryResponse>}
   * @memberof CategoryResponseIPaginate
   */
  items?: Array<CategoryResponse> | null;
}
/**
 *
 * @export
 * @interface CheckOutRequest
 */
export interface CheckOutRequest {
  /**
   *
   * @type {string}
   * @memberof CheckOutRequest
   */
  address: string;
}
/**
 *
 * @export
 * @interface CreateAnimalCategoryRequest
 */
export interface CreateAnimalCategoryRequest {
  /**
   *
   * @type {string}
   * @memberof CreateAnimalCategoryRequest
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateAnimalCategoryRequest
   */
  description: string;
}
/**
 *
 * @export
 * @interface CreateBlogCategoryRequest
 */
export interface CreateBlogCategoryRequest {
  /**
   *
   * @type {string}
   * @memberof CreateBlogCategoryRequest
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateBlogCategoryRequest
   */
  description: string;
}
/**
 *
 * @export
 * @interface CreateBlogRequest
 */
export interface CreateBlogRequest {
  /**
   *
   * @type {string}
   * @memberof CreateBlogRequest
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateBlogRequest
   */
  description: string;
  /**
   *
   * @type {boolean}
   * @memberof CreateBlogRequest
   */
  isHidden: boolean;
  /**
   *
   * @type {BlogEnum}
   * @memberof CreateBlogRequest
   */
  status?: BlogEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof CreateBlogRequest
   */
  blogCategoryIds?: Array<string> | null;
  /**
   *
   * @type {File}
   * @memberof CreateBlogRequest
   */
  mainImage: File;
  /**
   *
   * @type {Array<File>}
   * @memberof CreateBlogRequest
   */
  secondaryImages?: Array<File> | null;
}

/**
 *
 * @export
 * @interface CreateCategoryRequest
 */
export interface CreateCategoryRequest {
  /**
   *
   * @type {string}
   * @memberof CreateCategoryRequest
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateCategoryRequest
   */
  description: string;
}
/**
 *
 * @export
 * @interface CreateStaffRequest
 */
export interface CreateStaffRequest {
  /**
   *
   * @type {string}
   * @memberof CreateStaffRequest
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof CreateStaffRequest
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof CreateStaffRequest
   */
  phoneNumber: string;
  /**
   *
   * @type {string}
   * @memberof CreateStaffRequest
   */
  fullName: string;
  /**
   *
   * @type {StaffType}
   * @memberof CreateStaffRequest
   */
  type: StaffType;
}

/**
 *
 * @export
 * @interface DeleteImageAnimalRequest
 */
export interface DeleteImageAnimalRequest {
  /**
   *
   * @type {string}
   * @memberof DeleteImageAnimalRequest
   */
  id: string;
}
/**
 *
 * @export
 * @interface DeleteImageProductRequest
 */
export interface DeleteImageProductRequest {
  /**
   *
   * @type {string}
   * @memberof DeleteImageProductRequest
   */
  id: string;
}
/**
 *
 * @export
 * @interface ForgetPasswordRequest
 */
export interface ForgetPasswordRequest {
  /**
   *
   * @type {string}
   * @memberof ForgetPasswordRequest
   */
  otp: string;
  /**
   *
   * @type {string}
   * @memberof ForgetPasswordRequest
   */
  phoneNumber: string;
  /**
   *
   * @type {string}
   * @memberof ForgetPasswordRequest
   */
  password: string;
}
/**
 *
 * @export
 * @interface GenerateEmailOtpRequest
 */
export interface GenerateEmailOtpRequest {
  /**
   *
   * @type {string}
   * @memberof GenerateEmailOtpRequest
   */
  email: string;
}
/**
 *
 * @export
 * @interface GetAnimalDetailResponse
 */
export interface GetAnimalDetailResponse {
  /**
   *
   * @type {string}
   * @memberof GetAnimalDetailResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof GetAnimalDetailResponse
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetAnimalDetailResponse
   */
  description?: string | null;
  /**
   *
   * @type {number}
   * @memberof GetAnimalDetailResponse
   */
  age?: number;
  /**
   *
   * @type {string}
   * @memberof GetAnimalDetailResponse
   */
  sex?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetAnimalDetailResponse
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof GetAnimalDetailResponse
   */
  modifiedAt?: string;
  /**
   *
   * @type {Array<AnimalCategoryResponse>}
   * @memberof GetAnimalDetailResponse
   */
  animalCategories?: Array<AnimalCategoryResponse> | null;
  /**
   *
   * @type {Array<AnimalImageResponse>}
   * @memberof GetAnimalDetailResponse
   */
  animalImage?: Array<AnimalImageResponse> | null;
}
/**
 *
 * @export
 * @interface GetAnimalDetailResponseIPaginate
 */
export interface GetAnimalDetailResponseIPaginate {
  /**
   *
   * @type {number}
   * @memberof GetAnimalDetailResponseIPaginate
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof GetAnimalDetailResponseIPaginate
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof GetAnimalDetailResponseIPaginate
   */
  total?: number;
  /**
   *
   * @type {number}
   * @memberof GetAnimalDetailResponseIPaginate
   */
  totalPages?: number;
  /**
   *
   * @type {Array<GetAnimalDetailResponse>}
   * @memberof GetAnimalDetailResponseIPaginate
   */
  items?: Array<GetAnimalDetailResponse> | null;
}
/**
 *
 * @export
 * @interface GetAnimalResponse
 */
export interface GetAnimalResponse {
  /**
   *
   * @type {string}
   * @memberof GetAnimalResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof GetAnimalResponse
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetAnimalResponse
   */
  description?: string | null;
  /**
   *
   * @type {number}
   * @memberof GetAnimalResponse
   */
  age?: number;
  /**
   *
   * @type {string}
   * @memberof GetAnimalResponse
   */
  sex?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetAnimalResponse
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof GetAnimalResponse
   */
  modifiedAt?: string;
  /**
   *
   * @type {Array<AnimalImage>}
   * @memberof GetAnimalResponse
   */
  animalImage?: Array<AnimalImage> | null;
}
/**
 *
 * @export
 * @interface GetAnimalResponseIPaginate
 */
export interface GetAnimalResponseIPaginate {
  /**
   *
   * @type {number}
   * @memberof GetAnimalResponseIPaginate
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof GetAnimalResponseIPaginate
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof GetAnimalResponseIPaginate
   */
  total?: number;
  /**
   *
   * @type {number}
   * @memberof GetAnimalResponseIPaginate
   */
  totalPages?: number;
  /**
   *
   * @type {Array<GetAnimalResponse>}
   * @memberof GetAnimalResponseIPaginate
   */
  items?: Array<GetAnimalResponse> | null;
}
/**
 *
 * @export
 * @interface GetBlogDetailResponse
 */
export interface GetBlogDetailResponse {
  /**
   *
   * @type {string}
   * @memberof GetBlogDetailResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof GetBlogDetailResponse
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetBlogDetailResponse
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetBlogDetailResponse
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof GetBlogDetailResponse
   */
  modifiedAt?: string;
  /**
   *
   * @type {BlogEnum}
   * @memberof GetBlogDetailResponse
   */
  status?: BlogEnum;
  /**
   *
   * @type {boolean}
   * @memberof GetBlogDetailResponse
   */
  isHidden?: boolean;
  /**
   *
   * @type {Array<BlogCategoryResponse>}
   * @memberof GetBlogDetailResponse
   */
  blogCategories?: Array<BlogCategoryResponse> | null;
}

/**
 *
 * @export
 * @interface GetBlogDetailResponseIPaginate
 */
export interface GetBlogDetailResponseIPaginate {
  /**
   *
   * @type {number}
   * @memberof GetBlogDetailResponseIPaginate
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof GetBlogDetailResponseIPaginate
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof GetBlogDetailResponseIPaginate
   */
  total?: number;
  /**
   *
   * @type {number}
   * @memberof GetBlogDetailResponseIPaginate
   */
  totalPages?: number;
  /**
   *
   * @type {Array<GetBlogDetailResponse>}
   * @memberof GetBlogDetailResponseIPaginate
   */
  items?: Array<GetBlogDetailResponse> | null;
}
/**
 *
 * @export
 * @interface GetBlogResponse
 */
export interface GetBlogResponse {
  /**
   *
   * @type {string}
   * @memberof GetBlogResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof GetBlogResponse
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetBlogResponse
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetBlogResponse
   */
  createdAt?: string;
  /**
   *
   * @type {BlogEnum}
   * @memberof GetBlogResponse
   */
  status?: BlogEnum;
  /**
   *
   * @type {string}
   * @memberof GetBlogResponse
   */
  modifiedAt?: string;
  /**
   *
   * @type {boolean}
   * @memberof GetBlogResponse
   */
  isHidden?: boolean;
}

/**
 *
 * @export
 * @interface GetBlogResponseIPaginate
 */
export interface GetBlogResponseIPaginate {
  /**
   *
   * @type {number}
   * @memberof GetBlogResponseIPaginate
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof GetBlogResponseIPaginate
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof GetBlogResponseIPaginate
   */
  total?: number;
  /**
   *
   * @type {number}
   * @memberof GetBlogResponseIPaginate
   */
  totalPages?: number;
  /**
   *
   * @type {Array<GetBlogResponse>}
   * @memberof GetBlogResponseIPaginate
   */
  items?: Array<GetBlogResponse> | null;
}
/**
 *
 * @export
 * @interface GetProductDetailResponse
 */
export interface GetProductDetailResponse {
  /**
   *
   * @type {string}
   * @memberof GetProductDetailResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof GetProductDetailResponse
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetProductDetailResponse
   */
  description?: string | null;
  /**
   *
   * @type {number}
   * @memberof GetProductDetailResponse
   */
  quantity?: number;
  /**
   *
   * @type {number}
   * @memberof GetProductDetailResponse
   */
  volume?: number;
  /**
   *
   * @type {number}
   * @memberof GetProductDetailResponse
   */
  price?: number;
  /**
   *
   * @type {string}
   * @memberof GetProductDetailResponse
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof GetProductDetailResponse
   */
  modifiedAt?: string;
  /**
   *
   * @type {boolean}
   * @memberof GetProductDetailResponse
   */
  isHidden?: boolean;
  /**
   *
   * @type {Array<ProductImageResponse>}
   * @memberof GetProductDetailResponse
   */
  productImages?: Array<ProductImageResponse> | null;
  /**
   *
   * @type {Array<CategoryResponse>}
   * @memberof GetProductDetailResponse
   */
  categories?: Array<CategoryResponse> | null;
}
/**
 *
 * @export
 * @interface GetProductDetailResponseIPaginate
 */
export interface GetProductDetailResponseIPaginate {
  /**
   *
   * @type {number}
   * @memberof GetProductDetailResponseIPaginate
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof GetProductDetailResponseIPaginate
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof GetProductDetailResponseIPaginate
   */
  total?: number;
  /**
   *
   * @type {number}
   * @memberof GetProductDetailResponseIPaginate
   */
  totalPages?: number;
  /**
   *
   * @type {Array<GetProductDetailResponse>}
   * @memberof GetProductDetailResponseIPaginate
   */
  items?: Array<GetProductDetailResponse> | null;
}
/**
 *
 * @export
 * @interface GetProductResponse
 */
export interface GetProductResponse {
  /**
   *
   * @type {string}
   * @memberof GetProductResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof GetProductResponse
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetProductResponse
   */
  description?: string | null;
  /**
   *
   * @type {number}
   * @memberof GetProductResponse
   */
  quantity?: number;
  /**
   *
   * @type {number}
   * @memberof GetProductResponse
   */
  volume?: number;
  /**
   *
   * @type {number}
   * @memberof GetProductResponse
   */
  price?: number;
  /**
   *
   * @type {string}
   * @memberof GetProductResponse
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof GetProductResponse
   */
  modifiedAt?: string;
  /**
   *
   * @type {boolean}
   * @memberof GetProductResponse
   */
  isHidden?: boolean;
  /**
   *
   * @type {Array<ProductImageResponse>}
   * @memberof GetProductResponse
   */
  productImages?: Array<ProductImageResponse> | null;
}
/**
 *
 * @export
 * @interface GetProductResponseIPaginate
 */
export interface GetProductResponseIPaginate {
  /**
   *
   * @type {number}
   * @memberof GetProductResponseIPaginate
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof GetProductResponseIPaginate
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof GetProductResponseIPaginate
   */
  total?: number;
  /**
   *
   * @type {number}
   * @memberof GetProductResponseIPaginate
   */
  totalPages?: number;
  /**
   *
   * @type {Array<GetProductResponse>}
   * @memberof GetProductResponseIPaginate
   */
  items?: Array<GetProductResponse> | null;
}
/**
 *
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
  /**
   *
   * @type {string}
   * @memberof LoginRequest
   */
  usernameOrPhoneNumber: string;
  /**
   *
   * @type {string}
   * @memberof LoginRequest
   */
  password: string;
}
/**
 *
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
  /**
   *
   * @type {string}
   * @memberof LoginResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof LoginResponse
   */
  username?: string | null;
  /**
   *
   * @type {string}
   * @memberof LoginResponse
   */
  phoneNumber?: string | null;
  /**
   *
   * @type {string}
   * @memberof LoginResponse
   */
  fullName?: string | null;
  /**
   *
   * @type {string}
   * @memberof LoginResponse
   */
  token?: string | null;
  /**
   *
   * @type {string}
   * @memberof LoginResponse
   */
  refreshToken?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof LoginResponse
   */
  roles?: Array<string> | null;
}
/**
 *
 * @export
 * @interface MemberResponse
 */
export interface MemberResponse {
  /**
   *
   * @type {string}
   * @memberof MemberResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof MemberResponse
   */
  userId?: string;
  /**
   *
   * @type {string}
   * @memberof MemberResponse
   */
  username?: string | null;
  /**
   *
   * @type {string}
   * @memberof MemberResponse
   */
  phoneNumber?: string | null;
  /**
   *
   * @type {string}
   * @memberof MemberResponse
   */
  fullName?: string | null;
  /**
   *
   * @type {string}
   * @memberof MemberResponse
   */
  commune?: string | null;
  /**
   *
   * @type {string}
   * @memberof MemberResponse
   */
  district?: string | null;
  /**
   *
   * @type {string}
   * @memberof MemberResponse
   */
  province?: string | null;
  /**
   *
   * @type {string}
   * @memberof MemberResponse
   */
  address?: string | null;
  /**
   *
   * @type {string}
   * @memberof MemberResponse
   */
  provinceCode?: string | null;
  /**
   *
   * @type {string}
   * @memberof MemberResponse
   */
  districtCode?: string | null;
  /**
   *
   * @type {string}
   * @memberof MemberResponse
   */
  communeCode?: string | null;
}
/**
 *
 * @export
 * @interface OrderItemResponse
 */
export interface OrderItemResponse {
  /**
   *
   * @type {string}
   * @memberof OrderItemResponse
   */
  id?: string;
  /**
   *
   * @type {number}
   * @memberof OrderItemResponse
   */
  quantity?: number;
  /**
   *
   * @type {string}
   * @memberof OrderItemResponse
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof OrderItemResponse
   */
  modifiedAt?: string;
  /**
   *
   * @type {GetProductResponse}
   * @memberof OrderItemResponse
   */
  product?: GetProductResponse;
  /**
   *
   * @type {GetBlogResponse}
   * @memberof OrderItemResponse
   */
  blog?: GetBlogResponse;
}
/**
 *
 * @export
 * @interface OrderResponse
 */
export interface OrderResponse {
  /**
   *
   * @type {string}
   * @memberof OrderResponse
   */
  id?: string;
  /**
   *
   * @type {number}
   * @memberof OrderResponse
   */
  total?: number;
  /**
   *
   * @type {string}
   * @memberof OrderResponse
   */
  address?: string | null;
  /**
   *
   * @type {string}
   * @memberof OrderResponse
   */
  status?: string | null;
  /**
   *
   * @type {string}
   * @memberof OrderResponse
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof OrderResponse
   */
  modifiedAt?: string;
  /**
   *
   * @type {MemberResponse}
   * @memberof OrderResponse
   */
  member?: MemberResponse;
}
/**
 *
 * @export
 * @interface OrderResponseIPaginate
 */
export interface OrderResponseIPaginate {
  /**
   *
   * @type {number}
   * @memberof OrderResponseIPaginate
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof OrderResponseIPaginate
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof OrderResponseIPaginate
   */
  total?: number;
  /**
   *
   * @type {number}
   * @memberof OrderResponseIPaginate
   */
  totalPages?: number;
  /**
   *
   * @type {Array<OrderResponse>}
   * @memberof OrderResponseIPaginate
   */
  items?: Array<OrderResponse> | null;
}
/**
 *
 * @export
 * @enum {number}
 */

export const OrderStatus = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
} as const;

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus];

/**
 *
 * @export
 * @enum {number}
 */

export const PaymentStatus = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus];

/**
 *
 * @export
 * @interface PaymentWithOrderResponse
 */
export interface PaymentWithOrderResponse {
  /**
   *
   * @type {string}
   * @memberof PaymentWithOrderResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentWithOrderResponse
   */
  paymentDateTime?: string;
  /**
   *
   * @type {number}
   * @memberof PaymentWithOrderResponse
   */
  amount?: number;
  /**
   *
   * @type {string}
   * @memberof PaymentWithOrderResponse
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentWithOrderResponse
   */
  modifiedAt?: string;
  /**
   *
   * @type {PaymentStatus}
   * @memberof PaymentWithOrderResponse
   */
  status?: PaymentStatus;
  /**
   *
   * @type {OrderResponse}
   * @memberof PaymentWithOrderResponse
   */
  order?: OrderResponse;
}

/**
 *
 * @export
 * @interface ProductImageResponse
 */
export interface ProductImageResponse {
  /**
   *
   * @type {string}
   * @memberof ProductImageResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ProductImageResponse
   */
  imageUrl?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof ProductImageResponse
   */
  isMain?: boolean;
}
/**
 *
 * @export
 * @interface SignUpRequest
 */
export interface SignUpRequest {
  /**
   *
   * @type {string}
   * @memberof SignUpRequest
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof SignUpRequest
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof SignUpRequest
   */
  phoneNumber: string;
  /**
   *
   * @type {string}
   * @memberof SignUpRequest
   */
  fullName: string;
  /**
   *
   * @type {string}
   * @memberof SignUpRequest
   */
  otp: string;
}
/**
 *
 * @export
 * @interface StaffResponse
 */
export interface StaffResponse {
  /**
   *
   * @type {string}
   * @memberof StaffResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof StaffResponse
   */
  userId?: string;
  /**
   *
   * @type {string}
   * @memberof StaffResponse
   */
  username?: string | null;
  /**
   *
   * @type {string}
   * @memberof StaffResponse
   */
  phoneNumber?: string | null;
  /**
   *
   * @type {string}
   * @memberof StaffResponse
   */
  fullName?: string | null;
  /**
   *
   * @type {StaffType}
   * @memberof StaffResponse
   */
  type?: StaffType;
}

/**
 *
 * @export
 * @interface StaffResponseIPaginate
 */
export interface StaffResponseIPaginate {
  /**
   *
   * @type {number}
   * @memberof StaffResponseIPaginate
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof StaffResponseIPaginate
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof StaffResponseIPaginate
   */
  total?: number;
  /**
   *
   * @type {number}
   * @memberof StaffResponseIPaginate
   */
  totalPages?: number;
  /**
   *
   * @type {Array<StaffResponse>}
   * @memberof StaffResponseIPaginate
   */
  items?: Array<StaffResponse> | null;
}
/**
 *
 * @export
 * @enum {number}
 */

export const StaffType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;

export type StaffType = (typeof StaffType)[keyof typeof StaffType];

/**
 *
 * @export
 * @interface UpdateAnimalCategoryRelationshipRequest
 */
export interface UpdateAnimalCategoryRelationshipRequest {
  /**
   *
   * @type {Array<string>}
   * @memberof UpdateAnimalCategoryRelationshipRequest
   */
  animalIds: Array<string>;
}
/**
 *
 * @export
 * @interface UpdateAnimalCategoryRequest
 */
export interface UpdateAnimalCategoryRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateAnimalCategoryRequest
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UpdateAnimalCategoryRequest
   */
  description: string;
}
/**
 *
 * @export
 * @interface UpdateAnimalRequest
 */
export interface UpdateAnimalRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateAnimalRequest
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateAnimalRequest
   */
  description?: string | null;
  /**
   *
   * @type {number}
   * @memberof UpdateAnimalRequest
   */
  age?: number | null;
  /**
   *
   * @type {string}
   * @memberof UpdateAnimalRequest
   */
  sex?: string | null;
}
/**
 *
 * @export
 * @interface UpdateBlogCategoryRelationshipRequest
 */
export interface UpdateBlogCategoryRelationshipRequest {
  /**
   *
   * @type {Array<string>}
   * @memberof UpdateBlogCategoryRelationshipRequest
   */
  blogIds: Array<string>;
}
/**
 *
 * @export
 * @interface UpdateBlogCategoryRequest
 */
export interface UpdateBlogCategoryRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateBlogCategoryRequest
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UpdateBlogCategoryRequest
   */
  description: string;
}
/**
 *
 * @export
 * @interface UpdateBlogRequest
 */
export interface UpdateBlogRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateBlogRequest
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateBlogRequest
   */
  description?: string | null;
  /**
   *
   * @type {BlogEnum}
   * @memberof UpdateBlogRequest
   */
  status?: BlogEnum;
  /**
   *
   * @type {boolean}
   * @memberof UpdateBlogRequest
   */
  isHidden?: boolean | null;
}

/**
 *
 * @export
 * @interface UpdateCategoryRequest
 */
export interface UpdateCategoryRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateCategoryRequest
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UpdateCategoryRequest
   */
  description: string;
}
/**
 *
 * @export
 * @interface UpdateMemberRequest
 */
export interface UpdateMemberRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateMemberRequest
   */
  username?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateMemberRequest
   */
  fullName?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateMemberRequest
   */
  commune?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateMemberRequest
   */
  province?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateMemberRequest
   */
  district?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateMemberRequest
   */
  address?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateMemberRequest
   */
  provinceCode?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateMemberRequest
   */
  districtCode?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateMemberRequest
   */
  communeCode?: string | null;
}
/**
 *
 * @export
 * @interface UpdatePaymentOrderStatusRequest
 */
export interface UpdatePaymentOrderStatusRequest {
  /**
   *
   * @type {number}
   * @memberof UpdatePaymentOrderStatusRequest
   */
  orderCode: number;
}
/**
 *
 * @export
 * @interface UpdateProductCategoryRequest
 */
export interface UpdateProductCategoryRequest {
  /**
   *
   * @type {Array<string>}
   * @memberof UpdateProductCategoryRequest
   */
  productIds: Array<string>;
}
/**
 *
 * @export
 * @interface UpdateProductRequest
 */
export interface UpdateProductRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateProductRequest
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateProductRequest
   */
  description?: string | null;
  /**
   *
   * @type {number}
   * @memberof UpdateProductRequest
   */
  quantity?: number | null;
  /**
   *
   * @type {number}
   * @memberof UpdateProductRequest
   */
  volume?: number | null;
  /**
   *
   * @type {number}
   * @memberof UpdateProductRequest
   */
  price?: number | null;
  /**
   *
   * @type {boolean}
   * @memberof UpdateProductRequest
   */
  isHidden?: boolean | null;
}
/**
 *
 * @export
 * @interface UpdateStaffRequest
 */
export interface UpdateStaffRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateStaffRequest
   */
  username?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateStaffRequest
   */
  password?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateStaffRequest
   */
  fullName?: string | null;
  /**
   *
   * @type {StaffType}
   * @memberof UpdateStaffRequest
   */
  type?: StaffType;
}

/**
 *
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  username?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  phoneNumber?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  fullName?: string | null;
}

/**
 * AnimalApi - axios parameter creator
 * @export
 */
export const AnimalApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [name]
     * @param {string} [createAt]
     * @param {Array<string>} [animalCategoryIds]
     * @param {number} [age]
     * @param {string} [sex]
     * @param {string} [sortBy]
     * @param {boolean} [isAsc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalsGet: async (
      page?: number,
      size?: number,
      name?: string,
      createAt?: string,
      animalCategoryIds?: Array<string>,
      age?: number,
      sex?: string,
      sortBy?: string,
      isAsc?: boolean,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/animals`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (name !== undefined) {
        localVarQueryParameter["Name"] = name;
      }

      if (createAt !== undefined) {
        localVarQueryParameter["CreateAt"] =
          (createAt as any) instanceof Date
            ? (createAt as any).toISOString()
            : createAt;
      }

      if (animalCategoryIds) {
        localVarQueryParameter["AnimalCategoryIds"] = animalCategoryIds;
      }

      if (age !== undefined) {
        localVarQueryParameter["Age"] = age;
      }

      if (sex !== undefined) {
        localVarQueryParameter["Sex"] = sex;
      }

      if (sortBy !== undefined) {
        localVarQueryParameter["sortBy"] = sortBy;
      }

      if (isAsc !== undefined) {
        localVarQueryParameter["isAsc"] = isAsc;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {Array<DeleteImageAnimalRequest>} [deleteImageAnimalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalsIdAnimalImageDelete: async (
      id: string,
      deleteImageAnimalRequest?: Array<DeleteImageAnimalRequest>,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1AnimalsIdAnimalImageDelete", "id", id);
      const localVarPath = `/api/v1/animals/{id}/animal-image`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteImageAnimalRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {Array<AddImageAnimalRequest>} [images]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalsIdAnimalImagePost: async (
      id: string,
      images?: Array<AddImageAnimalRequest>,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1AnimalsIdAnimalImagePost", "id", id);
      const localVarPath = `/api/v1/animals/{id}/animal-image`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (images) {
        images.forEach((element) => {
          localVarFormParams.append("images", element as any);
        });
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalsIdGet: async (
      id: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1AnimalsIdGet", "id", id);
      const localVarPath = `/api/v1/animals/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {UpdateAnimalRequest} [updateAnimalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalsIdPatch: async (
      id: string,
      updateAnimalRequest?: UpdateAnimalRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1AnimalsIdPatch", "id", id);
      const localVarPath = `/api/v1/animals/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateAnimalRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} name
     * @param {string} description
     * @param {number} age
     * @param {string} sex
     * @param {File} mainImage
     * @param {Array<string>} [animalcategoryIds]
     * @param {Array<File>} [secondaryImages]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalsPost: async (
      name: string,
      description: string,
      age: number,
      sex: string,
      mainImage: File,
      animalcategoryIds?: Array<string>,
      secondaryImages?: Array<File>,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists("apiV1AnimalsPost", "name", name);
      // verify required parameter 'description' is not null or undefined
      assertParamExists("apiV1AnimalsPost", "description", description);
      // verify required parameter 'age' is not null or undefined
      assertParamExists("apiV1AnimalsPost", "age", age);
      // verify required parameter 'sex' is not null or undefined
      assertParamExists("apiV1AnimalsPost", "sex", sex);
      // verify required parameter 'mainImage' is not null or undefined
      assertParamExists("apiV1AnimalsPost", "mainImage", mainImage);
      const localVarPath = `/api/v1/animals`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (name !== undefined) {
        localVarFormParams.append("Name", name as any);
      }

      if (description !== undefined) {
        localVarFormParams.append("Description", description as any);
      }

      if (age !== undefined) {
        localVarFormParams.append("Age", age as any);
      }

      if (sex !== undefined) {
        localVarFormParams.append("Sex", sex as any);
      }
      if (animalcategoryIds) {
        animalcategoryIds.forEach((element) => {
          localVarFormParams.append("AnimalcategoryIds", element as any);
        });
      }

      if (mainImage !== undefined) {
        localVarFormParams.append("MainImage", mainImage as any);
      }
      if (secondaryImages) {
        secondaryImages.forEach((element) => {
          localVarFormParams.append("SecondaryImages", element as any);
        });
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AnimalApi - functional programming interface
 * @export
 */
export const AnimalApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AnimalApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [name]
     * @param {string} [createAt]
     * @param {Array<string>} [animalCategoryIds]
     * @param {number} [age]
     * @param {string} [sex]
     * @param {string} [sortBy]
     * @param {boolean} [isAsc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AnimalsGet(
      page?: number,
      size?: number,
      name?: string,
      createAt?: string,
      animalCategoryIds?: Array<string>,
      age?: number,
      sex?: string,
      sortBy?: string,
      isAsc?: boolean,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetAnimalDetailResponseIPaginate>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AnimalsGet(
        page,
        size,
        name,
        createAt,
        animalCategoryIds,
        age,
        sex,
        sortBy,
        isAsc,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AnimalApi.apiV1AnimalsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {Array<DeleteImageAnimalRequest>} [deleteImageAnimalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AnimalsIdAnimalImageDelete(
      id: string,
      deleteImageAnimalRequest?: Array<DeleteImageAnimalRequest>,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetAnimalResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AnimalsIdAnimalImageDelete(
          id,
          deleteImageAnimalRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AnimalApi.apiV1AnimalsIdAnimalImageDelete"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {Array<AddImageAnimalRequest>} [images]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AnimalsIdAnimalImagePost(
      id: string,
      images?: Array<AddImageAnimalRequest>,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetAnimalResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AnimalsIdAnimalImagePost(
          id,
          images,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AnimalApi.apiV1AnimalsIdAnimalImagePost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AnimalsIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetProductDetailResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AnimalsIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AnimalApi.apiV1AnimalsIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {UpdateAnimalRequest} [updateAnimalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AnimalsIdPatch(
      id: string,
      updateAnimalRequest?: UpdateAnimalRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetAnimalResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AnimalsIdPatch(
          id,
          updateAnimalRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AnimalApi.apiV1AnimalsIdPatch"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} name
     * @param {string} description
     * @param {number} age
     * @param {string} sex
     * @param {File} mainImage
     * @param {Array<string>} [animalcategoryIds]
     * @param {Array<File>} [secondaryImages]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AnimalsPost(
      name: string,
      description: string,
      age: number,
      sex: string,
      mainImage: File,
      animalcategoryIds?: Array<string>,
      secondaryImages?: Array<File>,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetAnimalResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AnimalsPost(
          name,
          description,
          age,
          sex,
          mainImage,
          animalcategoryIds,
          secondaryImages,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AnimalApi.apiV1AnimalsPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AnimalApi - factory interface
 * @export
 */
export const AnimalApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AnimalApiFp(configuration);
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [name]
     * @param {string} [createAt]
     * @param {Array<string>} [animalCategoryIds]
     * @param {number} [age]
     * @param {string} [sex]
     * @param {string} [sortBy]
     * @param {boolean} [isAsc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalsGet(
      page?: number,
      size?: number,
      name?: string,
      createAt?: string,
      animalCategoryIds?: Array<string>,
      age?: number,
      sex?: string,
      sortBy?: string,
      isAsc?: boolean,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetAnimalDetailResponseIPaginate> {
      return localVarFp
        .apiV1AnimalsGet(
          page,
          size,
          name,
          createAt,
          animalCategoryIds,
          age,
          sex,
          sortBy,
          isAsc,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {Array<DeleteImageAnimalRequest>} [deleteImageAnimalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalsIdAnimalImageDelete(
      id: string,
      deleteImageAnimalRequest?: Array<DeleteImageAnimalRequest>,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetAnimalResponse> {
      return localVarFp
        .apiV1AnimalsIdAnimalImageDelete(id, deleteImageAnimalRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {Array<AddImageAnimalRequest>} [images]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalsIdAnimalImagePost(
      id: string,
      images?: Array<AddImageAnimalRequest>,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetAnimalResponse> {
      return localVarFp
        .apiV1AnimalsIdAnimalImagePost(id, images, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalsIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetProductDetailResponse> {
      return localVarFp
        .apiV1AnimalsIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {UpdateAnimalRequest} [updateAnimalRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalsIdPatch(
      id: string,
      updateAnimalRequest?: UpdateAnimalRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetAnimalResponse> {
      return localVarFp
        .apiV1AnimalsIdPatch(id, updateAnimalRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} name
     * @param {string} description
     * @param {number} age
     * @param {string} sex
     * @param {File} mainImage
     * @param {Array<string>} [animalcategoryIds]
     * @param {Array<File>} [secondaryImages]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalsPost(
      name: string,
      description: string,
      age: number,
      sex: string,
      mainImage: File,
      animalcategoryIds?: Array<string>,
      secondaryImages?: Array<File>,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetAnimalResponse> {
      return localVarFp
        .apiV1AnimalsPost(
          name,
          description,
          age,
          sex,
          mainImage,
          animalcategoryIds,
          secondaryImages,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AnimalApi - object-oriented interface
 * @export
 * @class AnimalApi
 * @extends {BaseAPI}
 */
export class AnimalApi extends BaseAPI {
  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [name]
   * @param {string} [createAt]
   * @param {Array<string>} [animalCategoryIds]
   * @param {number} [age]
   * @param {string} [sex]
   * @param {string} [sortBy]
   * @param {boolean} [isAsc]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalApi
   */
  public apiV1AnimalsGet(
    page?: number,
    size?: number,
    name?: string,
    createAt?: string,
    animalCategoryIds?: Array<string>,
    age?: number,
    sex?: string,
    sortBy?: string,
    isAsc?: boolean,
    options?: RawAxiosRequestConfig
  ) {
    return AnimalApiFp(this.configuration)
      .apiV1AnimalsGet(
        page,
        size,
        name,
        createAt,
        animalCategoryIds,
        age,
        sex,
        sortBy,
        isAsc,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {Array<DeleteImageAnimalRequest>} [deleteImageAnimalRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalApi
   */
  public apiV1AnimalsIdAnimalImageDelete(
    id: string,
    deleteImageAnimalRequest?: Array<DeleteImageAnimalRequest>,
    options?: RawAxiosRequestConfig
  ) {
    return AnimalApiFp(this.configuration)
      .apiV1AnimalsIdAnimalImageDelete(id, deleteImageAnimalRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {Array<AddImageAnimalRequest>} [images]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalApi
   */
  public apiV1AnimalsIdAnimalImagePost(
    id: string,
    images?: Array<AddImageAnimalRequest>,
    options?: RawAxiosRequestConfig
  ) {
    return AnimalApiFp(this.configuration)
      .apiV1AnimalsIdAnimalImagePost(id, images, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalApi
   */
  public apiV1AnimalsIdGet(id: string, options?: RawAxiosRequestConfig) {
    return AnimalApiFp(this.configuration)
      .apiV1AnimalsIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {UpdateAnimalRequest} [updateAnimalRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalApi
   */
  public apiV1AnimalsIdPatch(
    id: string,
    updateAnimalRequest?: UpdateAnimalRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AnimalApiFp(this.configuration)
      .apiV1AnimalsIdPatch(id, updateAnimalRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} name
   * @param {string} description
   * @param {number} age
   * @param {string} sex
   * @param {File} mainImage
   * @param {Array<string>} [animalcategoryIds]
   * @param {Array<File>} [secondaryImages]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalApi
   */
  public apiV1AnimalsPost(
    name: string,
    description: string,
    age: number,
    sex: string,
    mainImage: File,
    animalcategoryIds?: Array<string>,
    secondaryImages?: Array<File>,
    options?: RawAxiosRequestConfig
  ) {
    return AnimalApiFp(this.configuration)
      .apiV1AnimalsPost(
        name,
        description,
        age,
        sex,
        mainImage,
        animalcategoryIds,
        secondaryImages,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AnimalCategoryApi - axios parameter creator
 * @export
 */
export const AnimalCategoryApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalCategoriesGet: async (
      page?: number,
      size?: number,
      name?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/animalCategories`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (name !== undefined) {
        localVarQueryParameter["Name"] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {UpdateAnimalCategoryRelationshipRequest} [updateAnimalCategoryRelationshipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalCategoriesIdAnimalCategoryPatch: async (
      id: string,
      updateAnimalCategoryRelationshipRequest?: UpdateAnimalCategoryRelationshipRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1AnimalCategoriesIdAnimalCategoryPatch", "id", id);
      const localVarPath =
        `/api/v1/animalCategories/{id}/animal-category`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateAnimalCategoryRelationshipRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalCategoriesIdAnimalGet: async (
      id: string,
      page?: number,
      size?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1AnimalCategoriesIdAnimalGet", "id", id);
      const localVarPath = `/api/v1/animalCategories/{id}/animal`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalCategoriesIdGet: async (
      id: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1AnimalCategoriesIdGet", "id", id);
      const localVarPath = `/api/v1/animalCategories/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {UpdateAnimalCategoryRequest} [updateAnimalCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalCategoriesIdPatch: async (
      id: string,
      updateAnimalCategoryRequest?: UpdateAnimalCategoryRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1AnimalCategoriesIdPatch", "id", id);
      const localVarPath = `/api/v1/animalCategories/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateAnimalCategoryRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateAnimalCategoryRequest} [createAnimalCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalCategoriesPost: async (
      createAnimalCategoryRequest?: CreateAnimalCategoryRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/animalCategories`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createAnimalCategoryRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AnimalCategoryApi - functional programming interface
 * @export
 */
export const AnimalCategoryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AnimalCategoryApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AnimalCategoriesGet(
      page?: number,
      size?: number,
      name?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AnimalCategoryResponseIPaginate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AnimalCategoriesGet(
          page,
          size,
          name,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AnimalCategoryApi.apiV1AnimalCategoriesGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {UpdateAnimalCategoryRelationshipRequest} [updateAnimalCategoryRelationshipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AnimalCategoriesIdAnimalCategoryPatch(
      id: string,
      updateAnimalCategoryRelationshipRequest?: UpdateAnimalCategoryRelationshipRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AnimalCategoryResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AnimalCategoriesIdAnimalCategoryPatch(
          id,
          updateAnimalCategoryRelationshipRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "AnimalCategoryApi.apiV1AnimalCategoriesIdAnimalCategoryPatch"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AnimalCategoriesIdAnimalGet(
      id: string,
      page?: number,
      size?: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetAnimalResponseIPaginate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AnimalCategoriesIdAnimalGet(
          id,
          page,
          size,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "AnimalCategoryApi.apiV1AnimalCategoriesIdAnimalGet"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AnimalCategoriesIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AnimalCategoryResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AnimalCategoriesIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AnimalCategoryApi.apiV1AnimalCategoriesIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {UpdateAnimalCategoryRequest} [updateAnimalCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AnimalCategoriesIdPatch(
      id: string,
      updateAnimalCategoryRequest?: UpdateAnimalCategoryRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AnimalCategoryResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AnimalCategoriesIdPatch(
          id,
          updateAnimalCategoryRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AnimalCategoryApi.apiV1AnimalCategoriesIdPatch"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateAnimalCategoryRequest} [createAnimalCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AnimalCategoriesPost(
      createAnimalCategoryRequest?: CreateAnimalCategoryRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AnimalCategoryResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AnimalCategoriesPost(
          createAnimalCategoryRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AnimalCategoryApi.apiV1AnimalCategoriesPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AnimalCategoryApi - factory interface
 * @export
 */
export const AnimalCategoryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AnimalCategoryApiFp(configuration);
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalCategoriesGet(
      page?: number,
      size?: number,
      name?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AnimalCategoryResponseIPaginate> {
      return localVarFp
        .apiV1AnimalCategoriesGet(page, size, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {UpdateAnimalCategoryRelationshipRequest} [updateAnimalCategoryRelationshipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalCategoriesIdAnimalCategoryPatch(
      id: string,
      updateAnimalCategoryRelationshipRequest?: UpdateAnimalCategoryRelationshipRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AnimalCategoryResponse> {
      return localVarFp
        .apiV1AnimalCategoriesIdAnimalCategoryPatch(
          id,
          updateAnimalCategoryRelationshipRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalCategoriesIdAnimalGet(
      id: string,
      page?: number,
      size?: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetAnimalResponseIPaginate> {
      return localVarFp
        .apiV1AnimalCategoriesIdAnimalGet(id, page, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalCategoriesIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AnimalCategoryResponse> {
      return localVarFp
        .apiV1AnimalCategoriesIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {UpdateAnimalCategoryRequest} [updateAnimalCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalCategoriesIdPatch(
      id: string,
      updateAnimalCategoryRequest?: UpdateAnimalCategoryRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AnimalCategoryResponse> {
      return localVarFp
        .apiV1AnimalCategoriesIdPatch(id, updateAnimalCategoryRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateAnimalCategoryRequest} [createAnimalCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AnimalCategoriesPost(
      createAnimalCategoryRequest?: CreateAnimalCategoryRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AnimalCategoryResponse> {
      return localVarFp
        .apiV1AnimalCategoriesPost(createAnimalCategoryRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AnimalCategoryApi - object-oriented interface
 * @export
 * @class AnimalCategoryApi
 * @extends {BaseAPI}
 */
export class AnimalCategoryApi extends BaseAPI {
  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [name]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalCategoryApi
   */
  public apiV1AnimalCategoriesGet(
    page?: number,
    size?: number,
    name?: string,
    options?: RawAxiosRequestConfig
  ) {
    return AnimalCategoryApiFp(this.configuration)
      .apiV1AnimalCategoriesGet(page, size, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {UpdateAnimalCategoryRelationshipRequest} [updateAnimalCategoryRelationshipRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalCategoryApi
   */
  public apiV1AnimalCategoriesIdAnimalCategoryPatch(
    id: string,
    updateAnimalCategoryRelationshipRequest?: UpdateAnimalCategoryRelationshipRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AnimalCategoryApiFp(this.configuration)
      .apiV1AnimalCategoriesIdAnimalCategoryPatch(
        id,
        updateAnimalCategoryRelationshipRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {number} [page]
   * @param {number} [size]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalCategoryApi
   */
  public apiV1AnimalCategoriesIdAnimalGet(
    id: string,
    page?: number,
    size?: number,
    options?: RawAxiosRequestConfig
  ) {
    return AnimalCategoryApiFp(this.configuration)
      .apiV1AnimalCategoriesIdAnimalGet(id, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalCategoryApi
   */
  public apiV1AnimalCategoriesIdGet(
    id: string,
    options?: RawAxiosRequestConfig
  ) {
    return AnimalCategoryApiFp(this.configuration)
      .apiV1AnimalCategoriesIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {UpdateAnimalCategoryRequest} [updateAnimalCategoryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalCategoryApi
   */
  public apiV1AnimalCategoriesIdPatch(
    id: string,
    updateAnimalCategoryRequest?: UpdateAnimalCategoryRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AnimalCategoryApiFp(this.configuration)
      .apiV1AnimalCategoriesIdPatch(id, updateAnimalCategoryRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateAnimalCategoryRequest} [createAnimalCategoryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalCategoryApi
   */
  public apiV1AnimalCategoriesPost(
    createAnimalCategoryRequest?: CreateAnimalCategoryRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AnimalCategoryApiFp(this.configuration)
      .apiV1AnimalCategoriesPost(createAnimalCategoryRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {ForgetPasswordRequest} [forgetPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ForgetPasswordPatch: async (
      forgetPasswordRequest?: ForgetPasswordRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/forget-password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        forgetPasswordRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LoginPost: async (
      loginRequest?: LoginRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {GenerateEmailOtpRequest} [generateEmailOtpRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OtpPost: async (
      generateEmailOtpRequest?: GenerateEmailOtpRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/otp`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        generateEmailOtpRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {SignUpRequest} [signUpRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SignupPost: async (
      signUpRequest?: SignUpRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/signup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        signUpRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {ForgetPasswordRequest} [forgetPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ForgetPasswordPatch(
      forgetPasswordRequest?: ForgetPasswordRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ForgetPasswordPatch(
          forgetPasswordRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.apiV1ForgetPasswordPatch"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1LoginPost(
      loginRequest?: LoginRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LoginPost(
        loginRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.apiV1LoginPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {GenerateEmailOtpRequest} [generateEmailOtpRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OtpPost(
      generateEmailOtpRequest?: GenerateEmailOtpRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OtpPost(
        generateEmailOtpRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.apiV1OtpPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {SignUpRequest} [signUpRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SignupPost(
      signUpRequest?: SignUpRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SignupPost(
        signUpRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.apiV1SignupPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AuthApiFp(configuration);
  return {
    /**
     *
     * @param {ForgetPasswordRequest} [forgetPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ForgetPasswordPatch(
      forgetPasswordRequest?: ForgetPasswordRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UserResponse> {
      return localVarFp
        .apiV1ForgetPasswordPatch(forgetPasswordRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LoginPost(
      loginRequest?: LoginRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<LoginResponse> {
      return localVarFp
        .apiV1LoginPost(loginRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {GenerateEmailOtpRequest} [generateEmailOtpRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OtpPost(
      generateEmailOtpRequest?: GenerateEmailOtpRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .apiV1OtpPost(generateEmailOtpRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {SignUpRequest} [signUpRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SignupPost(
      signUpRequest?: SignUpRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<LoginResponse> {
      return localVarFp
        .apiV1SignupPost(signUpRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @param {ForgetPasswordRequest} [forgetPasswordRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public apiV1ForgetPasswordPatch(
    forgetPasswordRequest?: ForgetPasswordRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .apiV1ForgetPasswordPatch(forgetPasswordRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {LoginRequest} [loginRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public apiV1LoginPost(
    loginRequest?: LoginRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .apiV1LoginPost(loginRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {GenerateEmailOtpRequest} [generateEmailOtpRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public apiV1OtpPost(
    generateEmailOtpRequest?: GenerateEmailOtpRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .apiV1OtpPost(generateEmailOtpRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {SignUpRequest} [signUpRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public apiV1SignupPost(
    signUpRequest?: SignUpRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .apiV1SignupPost(signUpRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * BlogApi - axios parameter creator
 * @export
 */
export const BlogApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [name]
     * @param {string} [createAt]
     * @param {Array<string>} [categoryIds]
     * @param {BlogEnum} [status]
     * @param {string} [sortBy]
     * @param {boolean} [isAsc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogsGet: async (
      page?: number,
      size?: number,
      name?: string,
      createAt?: string,
      categoryIds?: Array<string>,
      status?: BlogEnum,
      sortBy?: string,
      isAsc?: boolean,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/blogs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (name !== undefined) {
        localVarQueryParameter["Name"] = name;
      }

      if (createAt !== undefined) {
        localVarQueryParameter["CreateAt"] =
          (createAt as any) instanceof Date
            ? (createAt as any).toISOString()
            : createAt;
      }

      if (categoryIds) {
        localVarQueryParameter["CategoryIds"] = categoryIds;
      }

      if (status !== undefined) {
        localVarQueryParameter["Status"] = status;
      }

      if (sortBy !== undefined) {
        localVarQueryParameter["sortBy"] = sortBy;
      }

      if (isAsc !== undefined) {
        localVarQueryParameter["isAsc"] = isAsc;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogsIdGet: async (
      id: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1BlogsIdGet", "id", id);
      const localVarPath = `/api/v1/blogs/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {UpdateBlogRequest} [updateBlogRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogsIdPatch: async (
      id: string,
      updateBlogRequest?: UpdateBlogRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1BlogsIdPatch", "id", id);
      const localVarPath = `/api/v1/blogs/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateBlogRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateBlogRequest} [createBlogRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogsPost: async (
      createBlogRequest?: CreateBlogRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/blogs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createBlogRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * BlogApi - functional programming interface
 * @export
 */
export const BlogApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = BlogApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [name]
     * @param {string} [createAt]
     * @param {Array<string>} [categoryIds]
     * @param {BlogEnum} [status]
     * @param {string} [sortBy]
     * @param {boolean} [isAsc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1BlogsGet(
      page?: number,
      size?: number,
      name?: string,
      createAt?: string,
      categoryIds?: Array<string>,
      status?: BlogEnum,
      sortBy?: string,
      isAsc?: boolean,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetBlogDetailResponseIPaginate>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BlogsGet(
        page,
        size,
        name,
        createAt,
        categoryIds,
        status,
        sortBy,
        isAsc,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BlogApi.apiV1BlogsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1BlogsIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetBlogDetailResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BlogsIdGet(
        id,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BlogApi.apiV1BlogsIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {UpdateBlogRequest} [updateBlogRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1BlogsIdPatch(
      id: string,
      updateBlogRequest?: UpdateBlogRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetBlogResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1BlogsIdPatch(
          id,
          updateBlogRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BlogApi.apiV1BlogsIdPatch"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateBlogRequest} [createBlogRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1BlogsPost(
      createBlogRequest?: CreateBlogRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetBlogResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BlogsPost(
        createBlogRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BlogApi.apiV1BlogsPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * BlogApi - factory interface
 * @export
 */
export const BlogApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = BlogApiFp(configuration);
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [name]
     * @param {string} [createAt]
     * @param {Array<string>} [categoryIds]
     * @param {BlogEnum} [status]
     * @param {string} [sortBy]
     * @param {boolean} [isAsc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogsGet(
      page?: number,
      size?: number,
      name?: string,
      createAt?: string,
      categoryIds?: Array<string>,
      status?: BlogEnum,
      sortBy?: string,
      isAsc?: boolean,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetBlogDetailResponseIPaginate> {
      return localVarFp
        .apiV1BlogsGet(
          page,
          size,
          name,
          createAt,
          categoryIds,
          status,
          sortBy,
          isAsc,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogsIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetBlogDetailResponse> {
      return localVarFp
        .apiV1BlogsIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {UpdateBlogRequest} [updateBlogRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogsIdPatch(
      id: string,
      updateBlogRequest?: UpdateBlogRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetBlogResponse> {
      return localVarFp
        .apiV1BlogsIdPatch(id, updateBlogRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateBlogRequest} [createBlogRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogsPost(
      createBlogRequest?: CreateBlogRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetBlogResponse> {
      return localVarFp
        .apiV1BlogsPost(createBlogRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * BlogApi - object-oriented interface
 * @export
 * @class BlogApi
 * @extends {BaseAPI}
 */
export class BlogApi extends BaseAPI {
  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [name]
   * @param {string} [createAt]
   * @param {Array<string>} [categoryIds]
   * @param {BlogEnum} [status]
   * @param {string} [sortBy]
   * @param {boolean} [isAsc]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BlogApi
   */
  public apiV1BlogsGet(
    page?: number,
    size?: number,
    name?: string,
    createAt?: string,
    categoryIds?: Array<string>,
    status?: BlogEnum,
    sortBy?: string,
    isAsc?: boolean,
    options?: RawAxiosRequestConfig
  ) {
    return BlogApiFp(this.configuration)
      .apiV1BlogsGet(
        page,
        size,
        name,
        createAt,
        categoryIds,
        status,
        sortBy,
        isAsc,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BlogApi
   */
  public apiV1BlogsIdGet(id: string, options?: RawAxiosRequestConfig) {
    return BlogApiFp(this.configuration)
      .apiV1BlogsIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {UpdateBlogRequest} [updateBlogRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BlogApi
   */
  public apiV1BlogsIdPatch(
    id: string,
    updateBlogRequest?: UpdateBlogRequest,
    options?: RawAxiosRequestConfig
  ) {
    return BlogApiFp(this.configuration)
      .apiV1BlogsIdPatch(id, updateBlogRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateBlogRequest} [createBlogRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BlogApi
   */
  public apiV1BlogsPost(
    createBlogRequest?: CreateBlogRequest,
    options?: RawAxiosRequestConfig
  ) {
    return BlogApiFp(this.configuration)
      .apiV1BlogsPost(createBlogRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * BlogCategoryApi - axios parameter creator
 * @export
 */
export const BlogCategoryApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogCategoriesGet: async (
      page?: number,
      size?: number,
      name?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/blogCategories`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (name !== undefined) {
        localVarQueryParameter["Name"] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {UpdateBlogCategoryRelationshipRequest} [updateBlogCategoryRelationshipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogCategoriesIdBlogCategoryPatch: async (
      id: string,
      updateBlogCategoryRelationshipRequest?: UpdateBlogCategoryRelationshipRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1BlogCategoriesIdBlogCategoryPatch", "id", id);
      const localVarPath = `/api/v1/blogCategories/{id}/blog-category`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateBlogCategoryRelationshipRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogCategoriesIdBlogGet: async (
      id: string,
      page?: number,
      size?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1BlogCategoriesIdBlogGet", "id", id);
      const localVarPath = `/api/v1/blogCategories/{id}/blog`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogCategoriesIdGet: async (
      id: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1BlogCategoriesIdGet", "id", id);
      const localVarPath = `/api/v1/blogCategories/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {UpdateBlogCategoryRequest} [updateBlogCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogCategoriesIdPatch: async (
      id: string,
      updateBlogCategoryRequest?: UpdateBlogCategoryRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1BlogCategoriesIdPatch", "id", id);
      const localVarPath = `/api/v1/blogCategories/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateBlogCategoryRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateBlogCategoryRequest} [createBlogCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogCategoriesPost: async (
      createBlogCategoryRequest?: CreateBlogCategoryRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/blogCategories`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createBlogCategoryRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * BlogCategoryApi - functional programming interface
 * @export
 */
export const BlogCategoryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    BlogCategoryApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1BlogCategoriesGet(
      page?: number,
      size?: number,
      name?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BlogCategoryResponseIPaginate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1BlogCategoriesGet(
          page,
          size,
          name,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BlogCategoryApi.apiV1BlogCategoriesGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {UpdateBlogCategoryRelationshipRequest} [updateBlogCategoryRelationshipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1BlogCategoriesIdBlogCategoryPatch(
      id: string,
      updateBlogCategoryRelationshipRequest?: UpdateBlogCategoryRelationshipRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BlogCategoryResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1BlogCategoriesIdBlogCategoryPatch(
          id,
          updateBlogCategoryRelationshipRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "BlogCategoryApi.apiV1BlogCategoriesIdBlogCategoryPatch"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1BlogCategoriesIdBlogGet(
      id: string,
      page?: number,
      size?: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetBlogResponseIPaginate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1BlogCategoriesIdBlogGet(
          id,
          page,
          size,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BlogCategoryApi.apiV1BlogCategoriesIdBlogGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1BlogCategoriesIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BlogCategoryResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1BlogCategoriesIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BlogCategoryApi.apiV1BlogCategoriesIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {UpdateBlogCategoryRequest} [updateBlogCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1BlogCategoriesIdPatch(
      id: string,
      updateBlogCategoryRequest?: UpdateBlogCategoryRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BlogCategoryResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1BlogCategoriesIdPatch(
          id,
          updateBlogCategoryRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BlogCategoryApi.apiV1BlogCategoriesIdPatch"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateBlogCategoryRequest} [createBlogCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1BlogCategoriesPost(
      createBlogCategoryRequest?: CreateBlogCategoryRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BlogCategoryResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1BlogCategoriesPost(
          createBlogCategoryRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BlogCategoryApi.apiV1BlogCategoriesPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * BlogCategoryApi - factory interface
 * @export
 */
export const BlogCategoryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = BlogCategoryApiFp(configuration);
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogCategoriesGet(
      page?: number,
      size?: number,
      name?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BlogCategoryResponseIPaginate> {
      return localVarFp
        .apiV1BlogCategoriesGet(page, size, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {UpdateBlogCategoryRelationshipRequest} [updateBlogCategoryRelationshipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogCategoriesIdBlogCategoryPatch(
      id: string,
      updateBlogCategoryRelationshipRequest?: UpdateBlogCategoryRelationshipRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BlogCategoryResponse> {
      return localVarFp
        .apiV1BlogCategoriesIdBlogCategoryPatch(
          id,
          updateBlogCategoryRelationshipRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogCategoriesIdBlogGet(
      id: string,
      page?: number,
      size?: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetBlogResponseIPaginate> {
      return localVarFp
        .apiV1BlogCategoriesIdBlogGet(id, page, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogCategoriesIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BlogCategoryResponse> {
      return localVarFp
        .apiV1BlogCategoriesIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {UpdateBlogCategoryRequest} [updateBlogCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogCategoriesIdPatch(
      id: string,
      updateBlogCategoryRequest?: UpdateBlogCategoryRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BlogCategoryResponse> {
      return localVarFp
        .apiV1BlogCategoriesIdPatch(id, updateBlogCategoryRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateBlogCategoryRequest} [createBlogCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BlogCategoriesPost(
      createBlogCategoryRequest?: CreateBlogCategoryRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BlogCategoryResponse> {
      return localVarFp
        .apiV1BlogCategoriesPost(createBlogCategoryRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * BlogCategoryApi - object-oriented interface
 * @export
 * @class BlogCategoryApi
 * @extends {BaseAPI}
 */
export class BlogCategoryApi extends BaseAPI {
  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [name]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BlogCategoryApi
   */
  public apiV1BlogCategoriesGet(
    page?: number,
    size?: number,
    name?: string,
    options?: RawAxiosRequestConfig
  ) {
    return BlogCategoryApiFp(this.configuration)
      .apiV1BlogCategoriesGet(page, size, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {UpdateBlogCategoryRelationshipRequest} [updateBlogCategoryRelationshipRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BlogCategoryApi
   */
  public apiV1BlogCategoriesIdBlogCategoryPatch(
    id: string,
    updateBlogCategoryRelationshipRequest?: UpdateBlogCategoryRelationshipRequest,
    options?: RawAxiosRequestConfig
  ) {
    return BlogCategoryApiFp(this.configuration)
      .apiV1BlogCategoriesIdBlogCategoryPatch(
        id,
        updateBlogCategoryRelationshipRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {number} [page]
   * @param {number} [size]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BlogCategoryApi
   */
  public apiV1BlogCategoriesIdBlogGet(
    id: string,
    page?: number,
    size?: number,
    options?: RawAxiosRequestConfig
  ) {
    return BlogCategoryApiFp(this.configuration)
      .apiV1BlogCategoriesIdBlogGet(id, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BlogCategoryApi
   */
  public apiV1BlogCategoriesIdGet(id: string, options?: RawAxiosRequestConfig) {
    return BlogCategoryApiFp(this.configuration)
      .apiV1BlogCategoriesIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {UpdateBlogCategoryRequest} [updateBlogCategoryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BlogCategoryApi
   */
  public apiV1BlogCategoriesIdPatch(
    id: string,
    updateBlogCategoryRequest?: UpdateBlogCategoryRequest,
    options?: RawAxiosRequestConfig
  ) {
    return BlogCategoryApiFp(this.configuration)
      .apiV1BlogCategoriesIdPatch(id, updateBlogCategoryRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateBlogCategoryRequest} [createBlogCategoryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BlogCategoryApi
   */
  public apiV1BlogCategoriesPost(
    createBlogCategoryRequest?: CreateBlogCategoryRequest,
    options?: RawAxiosRequestConfig
  ) {
    return BlogCategoryApiFp(this.configuration)
      .apiV1BlogCategoriesPost(createBlogCategoryRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CartApi - axios parameter creator
 * @export
 */
export const CartApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CartsDelete: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/carts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CartsGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/carts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CartModel} [cartModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CartsPatch: async (
      cartModel?: CartModel,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/carts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        cartModel,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CartModel} [cartModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CartsPost: async (
      cartModel?: CartModel,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/carts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        cartModel,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CartApi - functional programming interface
 * @export
 */
export const CartApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CartApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1CartsDelete(
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<CartModelResponse>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1CartsDelete(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CartApi.apiV1CartsDelete"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1CartsGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<CartModelResponse>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CartsGet(
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CartApi.apiV1CartsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CartModel} [cartModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1CartsPatch(
      cartModel?: CartModel,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<CartModelResponse>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CartsPatch(
        cartModel,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CartApi.apiV1CartsPatch"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CartModel} [cartModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1CartsPost(
      cartModel?: CartModel,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<CartModelResponse>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CartsPost(
        cartModel,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CartApi.apiV1CartsPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * CartApi - factory interface
 * @export
 */
export const CartApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CartApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CartsDelete(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<CartModelResponse>> {
      return localVarFp
        .apiV1CartsDelete(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CartsGet(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<CartModelResponse>> {
      return localVarFp
        .apiV1CartsGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CartModel} [cartModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CartsPatch(
      cartModel?: CartModel,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<CartModelResponse>> {
      return localVarFp
        .apiV1CartsPatch(cartModel, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CartModel} [cartModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CartsPost(
      cartModel?: CartModel,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<CartModelResponse>> {
      return localVarFp
        .apiV1CartsPost(cartModel, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CartApi - object-oriented interface
 * @export
 * @class CartApi
 * @extends {BaseAPI}
 */
export class CartApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CartApi
   */
  public apiV1CartsDelete(options?: RawAxiosRequestConfig) {
    return CartApiFp(this.configuration)
      .apiV1CartsDelete(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CartApi
   */
  public apiV1CartsGet(options?: RawAxiosRequestConfig) {
    return CartApiFp(this.configuration)
      .apiV1CartsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CartModel} [cartModel]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CartApi
   */
  public apiV1CartsPatch(
    cartModel?: CartModel,
    options?: RawAxiosRequestConfig
  ) {
    return CartApiFp(this.configuration)
      .apiV1CartsPatch(cartModel, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CartModel} [cartModel]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CartApi
   */
  public apiV1CartsPost(
    cartModel?: CartModel,
    options?: RawAxiosRequestConfig
  ) {
    return CartApiFp(this.configuration)
      .apiV1CartsPost(cartModel, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CategoriesGet: async (
      page?: number,
      size?: number,
      name?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/categories`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (name !== undefined) {
        localVarQueryParameter["Name"] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CategoriesIdGet: async (
      id: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1CategoriesIdGet", "id", id);
      const localVarPath = `/api/v1/categories/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {UpdateCategoryRequest} [updateCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CategoriesIdPatch: async (
      id: string,
      updateCategoryRequest?: UpdateCategoryRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1CategoriesIdPatch", "id", id);
      const localVarPath = `/api/v1/categories/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCategoryRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {UpdateProductCategoryRequest} [updateProductCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CategoriesIdProductCategoryPatch: async (
      id: string,
      updateProductCategoryRequest?: UpdateProductCategoryRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1CategoriesIdProductCategoryPatch", "id", id);
      const localVarPath = `/api/v1/categories/{id}/product-category`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateProductCategoryRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CategoriesIdProductGet: async (
      id: string,
      page?: number,
      size?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1CategoriesIdProductGet", "id", id);
      const localVarPath = `/api/v1/categories/{id}/product`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateCategoryRequest} [createCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CategoriesPost: async (
      createCategoryRequest?: CreateCategoryRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/categories`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCategoryRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1CategoriesGet(
      page?: number,
      size?: number,
      name?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CategoryResponseIPaginate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1CategoriesGet(
          page,
          size,
          name,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CategoryApi.apiV1CategoriesGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1CategoriesIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CategoryResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1CategoriesIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CategoryApi.apiV1CategoriesIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {UpdateCategoryRequest} [updateCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1CategoriesIdPatch(
      id: string,
      updateCategoryRequest?: UpdateCategoryRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CategoryResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1CategoriesIdPatch(
          id,
          updateCategoryRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CategoryApi.apiV1CategoriesIdPatch"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {UpdateProductCategoryRequest} [updateProductCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1CategoriesIdProductCategoryPatch(
      id: string,
      updateProductCategoryRequest?: UpdateProductCategoryRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CategoryResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1CategoriesIdProductCategoryPatch(
          id,
          updateProductCategoryRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "CategoryApi.apiV1CategoriesIdProductCategoryPatch"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1CategoriesIdProductGet(
      id: string,
      page?: number,
      size?: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetProductResponseIPaginate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1CategoriesIdProductGet(
          id,
          page,
          size,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CategoryApi.apiV1CategoriesIdProductGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateCategoryRequest} [createCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1CategoriesPost(
      createCategoryRequest?: CreateCategoryRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CategoryResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1CategoriesPost(
          createCategoryRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CategoryApi.apiV1CategoriesPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CategoryApiFp(configuration);
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CategoriesGet(
      page?: number,
      size?: number,
      name?: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CategoryResponseIPaginate> {
      return localVarFp
        .apiV1CategoriesGet(page, size, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CategoriesIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CategoryResponse> {
      return localVarFp
        .apiV1CategoriesIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {UpdateCategoryRequest} [updateCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CategoriesIdPatch(
      id: string,
      updateCategoryRequest?: UpdateCategoryRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CategoryResponse> {
      return localVarFp
        .apiV1CategoriesIdPatch(id, updateCategoryRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {UpdateProductCategoryRequest} [updateProductCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CategoriesIdProductCategoryPatch(
      id: string,
      updateProductCategoryRequest?: UpdateProductCategoryRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CategoryResponse> {
      return localVarFp
        .apiV1CategoriesIdProductCategoryPatch(
          id,
          updateProductCategoryRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CategoriesIdProductGet(
      id: string,
      page?: number,
      size?: number,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetProductResponseIPaginate> {
      return localVarFp
        .apiV1CategoriesIdProductGet(id, page, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateCategoryRequest} [createCategoryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CategoriesPost(
      createCategoryRequest?: CreateCategoryRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CategoryResponse> {
      return localVarFp
        .apiV1CategoriesPost(createCategoryRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [name]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApi
   */
  public apiV1CategoriesGet(
    page?: number,
    size?: number,
    name?: string,
    options?: RawAxiosRequestConfig
  ) {
    return CategoryApiFp(this.configuration)
      .apiV1CategoriesGet(page, size, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApi
   */
  public apiV1CategoriesIdGet(id: string, options?: RawAxiosRequestConfig) {
    return CategoryApiFp(this.configuration)
      .apiV1CategoriesIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {UpdateCategoryRequest} [updateCategoryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApi
   */
  public apiV1CategoriesIdPatch(
    id: string,
    updateCategoryRequest?: UpdateCategoryRequest,
    options?: RawAxiosRequestConfig
  ) {
    return CategoryApiFp(this.configuration)
      .apiV1CategoriesIdPatch(id, updateCategoryRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {UpdateProductCategoryRequest} [updateProductCategoryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApi
   */
  public apiV1CategoriesIdProductCategoryPatch(
    id: string,
    updateProductCategoryRequest?: UpdateProductCategoryRequest,
    options?: RawAxiosRequestConfig
  ) {
    return CategoryApiFp(this.configuration)
      .apiV1CategoriesIdProductCategoryPatch(
        id,
        updateProductCategoryRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {number} [page]
   * @param {number} [size]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApi
   */
  public apiV1CategoriesIdProductGet(
    id: string,
    page?: number,
    size?: number,
    options?: RawAxiosRequestConfig
  ) {
    return CategoryApiFp(this.configuration)
      .apiV1CategoriesIdProductGet(id, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateCategoryRequest} [createCategoryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApi
   */
  public apiV1CategoriesPost(
    createCategoryRequest?: CreateCategoryRequest,
    options?: RawAxiosRequestConfig
  ) {
    return CategoryApiFp(this.configuration)
      .apiV1CategoriesPost(createCategoryRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MemberApi - axios parameter creator
 * @export
 */
export const MemberApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1MembersInformationGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/members/information`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateMemberRequest} [updateMemberRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1MembersPatch: async (
      updateMemberRequest?: UpdateMemberRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/members`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateMemberRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MemberApi - functional programming interface
 * @export
 */
export const MemberApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MemberApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1MembersInformationGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1MembersInformationGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MemberApi.apiV1MembersInformationGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {UpdateMemberRequest} [updateMemberRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1MembersPatch(
      updateMemberRequest?: UpdateMemberRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1MembersPatch(
          updateMemberRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MemberApi.apiV1MembersPatch"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * MemberApi - factory interface
 * @export
 */
export const MemberApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MemberApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1MembersInformationGet(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<MemberResponse> {
      return localVarFp
        .apiV1MembersInformationGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateMemberRequest} [updateMemberRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1MembersPatch(
      updateMemberRequest?: UpdateMemberRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UserResponse> {
      return localVarFp
        .apiV1MembersPatch(updateMemberRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * MemberApi - object-oriented interface
 * @export
 * @class MemberApi
 * @extends {BaseAPI}
 */
export class MemberApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberApi
   */
  public apiV1MembersInformationGet(options?: RawAxiosRequestConfig) {
    return MemberApiFp(this.configuration)
      .apiV1MembersInformationGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateMemberRequest} [updateMemberRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberApi
   */
  public apiV1MembersPatch(
    updateMemberRequest?: UpdateMemberRequest,
    options?: RawAxiosRequestConfig
  ) {
    return MemberApiFp(this.configuration)
      .apiV1MembersPatch(updateMemberRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {OrderStatus} [status]
     * @param {string} [createdAt]
     * @param {string} [username]
     * @param {string} [code]
     * @param {string} [sortBy]
     * @param {boolean} [isAsc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OrdersGet: async (
      page?: number,
      size?: number,
      status?: OrderStatus,
      createdAt?: string,
      username?: string,
      code?: string,
      sortBy?: string,
      isAsc?: boolean,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/orders`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (status !== undefined) {
        localVarQueryParameter["Status"] = status;
      }

      if (createdAt !== undefined) {
        localVarQueryParameter["CreatedAt"] =
          (createdAt as any) instanceof Date
            ? (createdAt as any).toISOString()
            : createdAt;
      }

      if (username !== undefined) {
        localVarQueryParameter["Username"] = username;
      }

      if (code !== undefined) {
        localVarQueryParameter["Code"] = code;
      }

      if (sortBy !== undefined) {
        localVarQueryParameter["sortBy"] = sortBy;
      }

      if (isAsc !== undefined) {
        localVarQueryParameter["isAsc"] = isAsc;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OrdersIdOrderItemsGet: async (
      id: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1OrdersIdOrderItemsGet", "id", id);
      const localVarPath = `/api/v1/orders/{id}/order-items`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {OrderStatus} [status]
     * @param {string} [createdAt]
     * @param {string} [username]
     * @param {string} [code]
     * @param {string} [sortBy]
     * @param {boolean} [isAsc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OrdersGet(
      page?: number,
      size?: number,
      status?: OrderStatus,
      createdAt?: string,
      username?: string,
      code?: string,
      sortBy?: string,
      isAsc?: boolean,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<OrderResponseIPaginate>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrdersGet(
        page,
        size,
        status,
        createdAt,
        username,
        code,
        sortBy,
        isAsc,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OrderApi.apiV1OrdersGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OrdersIdOrderItemsGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OrderItemResponse>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1OrdersIdOrderItemsGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OrderApi.apiV1OrdersIdOrderItemsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = OrderApiFp(configuration);
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {OrderStatus} [status]
     * @param {string} [createdAt]
     * @param {string} [username]
     * @param {string} [code]
     * @param {string} [sortBy]
     * @param {boolean} [isAsc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OrdersGet(
      page?: number,
      size?: number,
      status?: OrderStatus,
      createdAt?: string,
      username?: string,
      code?: string,
      sortBy?: string,
      isAsc?: boolean,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<OrderResponseIPaginate> {
      return localVarFp
        .apiV1OrdersGet(
          page,
          size,
          status,
          createdAt,
          username,
          code,
          sortBy,
          isAsc,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OrdersIdOrderItemsGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<OrderItemResponse>> {
      return localVarFp
        .apiV1OrdersIdOrderItemsGet(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {OrderStatus} [status]
   * @param {string} [createdAt]
   * @param {string} [username]
   * @param {string} [code]
   * @param {string} [sortBy]
   * @param {boolean} [isAsc]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrderApi
   */
  public apiV1OrdersGet(
    page?: number,
    size?: number,
    status?: OrderStatus,
    createdAt?: string,
    username?: string,
    code?: string,
    sortBy?: string,
    isAsc?: boolean,
    options?: RawAxiosRequestConfig
  ) {
    return OrderApiFp(this.configuration)
      .apiV1OrdersGet(
        page,
        size,
        status,
        createdAt,
        username,
        code,
        sortBy,
        isAsc,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrderApi
   */
  public apiV1OrdersIdOrderItemsGet(
    id: string,
    options?: RawAxiosRequestConfig
  ) {
    return OrderApiFp(this.configuration)
      .apiV1OrdersIdOrderItemsGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PaymentApi - axios parameter creator
 * @export
 */
export const PaymentApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {CheckOutRequest} [checkOutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PaymentsCheckoutPost: async (
      checkOutRequest?: CheckOutRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/payments/checkout`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        checkOutRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdatePaymentOrderStatusRequest} [updatePaymentOrderStatusRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PaymentsPatch: async (
      updatePaymentOrderStatusRequest?: UpdatePaymentOrderStatusRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/payments`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePaymentOrderStatusRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PaymentApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CheckOutRequest} [checkOutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PaymentsCheckoutPost(
      checkOutRequest?: CheckOutRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1PaymentsCheckoutPost(
          checkOutRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PaymentApi.apiV1PaymentsCheckoutPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {UpdatePaymentOrderStatusRequest} [updatePaymentOrderStatusRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PaymentsPatch(
      updatePaymentOrderStatusRequest?: UpdatePaymentOrderStatusRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaymentWithOrderResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1PaymentsPatch(
          updatePaymentOrderStatusRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PaymentApi.apiV1PaymentsPatch"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PaymentApiFp(configuration);
  return {
    /**
     *
     * @param {CheckOutRequest} [checkOutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PaymentsCheckoutPost(
      checkOutRequest?: CheckOutRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<string> {
      return localVarFp
        .apiV1PaymentsCheckoutPost(checkOutRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdatePaymentOrderStatusRequest} [updatePaymentOrderStatusRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PaymentsPatch(
      updatePaymentOrderStatusRequest?: UpdatePaymentOrderStatusRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<PaymentWithOrderResponse> {
      return localVarFp
        .apiV1PaymentsPatch(updatePaymentOrderStatusRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
export class PaymentApi extends BaseAPI {
  /**
   *
   * @param {CheckOutRequest} [checkOutRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentApi
   */
  public apiV1PaymentsCheckoutPost(
    checkOutRequest?: CheckOutRequest,
    options?: RawAxiosRequestConfig
  ) {
    return PaymentApiFp(this.configuration)
      .apiV1PaymentsCheckoutPost(checkOutRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdatePaymentOrderStatusRequest} [updatePaymentOrderStatusRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentApi
   */
  public apiV1PaymentsPatch(
    updatePaymentOrderStatusRequest?: UpdatePaymentOrderStatusRequest,
    options?: RawAxiosRequestConfig
  ) {
    return PaymentApiFp(this.configuration)
      .apiV1PaymentsPatch(updatePaymentOrderStatusRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [name]
     * @param {string} [createAt]
     * @param {Array<string>} [categoryIds]
     * @param {number} [minPrice]
     * @param {number} [maxPrice]
     * @param {string} [sortBy]
     * @param {boolean} [isAsc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsGet: async (
      page?: number,
      size?: number,
      name?: string,
      createAt?: string,
      categoryIds?: Array<string>,
      minPrice?: number,
      maxPrice?: number,
      sortBy?: string,
      isAsc?: boolean,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/products`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (name !== undefined) {
        localVarQueryParameter["Name"] = name;
      }

      if (createAt !== undefined) {
        localVarQueryParameter["CreateAt"] =
          (createAt as any) instanceof Date
            ? (createAt as any).toISOString()
            : createAt;
      }

      if (categoryIds) {
        localVarQueryParameter["CategoryIds"] = categoryIds;
      }

      if (minPrice !== undefined) {
        localVarQueryParameter["MinPrice"] = minPrice;
      }

      if (maxPrice !== undefined) {
        localVarQueryParameter["MaxPrice"] = maxPrice;
      }

      if (sortBy !== undefined) {
        localVarQueryParameter["sortBy"] = sortBy;
      }

      if (isAsc !== undefined) {
        localVarQueryParameter["isAsc"] = isAsc;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsIdGet: async (
      id: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1ProductsIdGet", "id", id);
      const localVarPath = `/api/v1/products/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {UpdateProductRequest} [updateProductRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsIdPatch: async (
      id: string,
      updateProductRequest?: UpdateProductRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1ProductsIdPatch", "id", id);
      const localVarPath = `/api/v1/products/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateProductRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {Array<DeleteImageProductRequest>} [request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsIdProductImageDelete: async (
      id: string,
      request?: Array<DeleteImageProductRequest>,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1ProductsIdProductImageDelete", "id", id);
      const localVarPath = `/api/v1/products/{id}/product-image`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (request) {
        request.forEach((element) => {
          localVarFormParams.append("request", element as any);
        });
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {Array<AddImageProductRequest>} [request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsIdProductImagePost: async (
      id: string,
      request?: Array<AddImageProductRequest>,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1ProductsIdProductImagePost", "id", id);
      const localVarPath = `/api/v1/products/{id}/product-image`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (request) {
        request.forEach((element) => {
          localVarFormParams.append("request", element as any);
        });
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} name
     * @param {string} description
     * @param {number} price
     * @param {number} quantity
     * @param {number} volume
     * @param {boolean} isHidden
     * @param {File} mainImage
     * @param {Array<string>} [categoryIds]
     * @param {Array<File>} [secondaryImages]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsPost: async (
      name: string,
      description: string,
      price: number,
      quantity: number,
      volume: number,
      isHidden: boolean,
      mainImage: File,
      categoryIds?: Array<string>,
      secondaryImages?: Array<File>,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists("apiV1ProductsPost", "name", name);
      // verify required parameter 'description' is not null or undefined
      assertParamExists("apiV1ProductsPost", "description", description);
      // verify required parameter 'price' is not null or undefined
      assertParamExists("apiV1ProductsPost", "price", price);
      // verify required parameter 'quantity' is not null or undefined
      assertParamExists("apiV1ProductsPost", "quantity", quantity);
      // verify required parameter 'volume' is not null or undefined
      assertParamExists("apiV1ProductsPost", "volume", volume);
      // verify required parameter 'isHidden' is not null or undefined
      assertParamExists("apiV1ProductsPost", "isHidden", isHidden);
      // verify required parameter 'mainImage' is not null or undefined
      assertParamExists("apiV1ProductsPost", "mainImage", mainImage);
      const localVarPath = `/api/v1/products`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (name !== undefined) {
        localVarFormParams.append("Name", name as any);
      }

      if (description !== undefined) {
        localVarFormParams.append("Description", description as any);
      }

      if (price !== undefined) {
        localVarFormParams.append("Price", price as any);
      }

      if (quantity !== undefined) {
        localVarFormParams.append("Quantity", quantity as any);
      }

      if (volume !== undefined) {
        localVarFormParams.append("Volume", volume as any);
      }

      if (isHidden !== undefined) {
        localVarFormParams.append("IsHidden", String(isHidden) as any);
      }
      if (categoryIds) {
        categoryIds.forEach((element) => {
          localVarFormParams.append("CategoryIds", element as any);
        });
      }

      if (mainImage !== undefined) {
        localVarFormParams.append("MainImage", mainImage as any);
      }
      if (secondaryImages) {
        secondaryImages.forEach((element) => {
          localVarFormParams.append("SecondaryImages", element as any);
        });
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [name]
     * @param {string} [createAt]
     * @param {Array<string>} [categoryIds]
     * @param {number} [minPrice]
     * @param {number} [maxPrice]
     * @param {string} [sortBy]
     * @param {boolean} [isAsc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ProductsGet(
      page?: number,
      size?: number,
      name?: string,
      createAt?: string,
      categoryIds?: Array<string>,
      minPrice?: number,
      maxPrice?: number,
      sortBy?: string,
      isAsc?: boolean,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetProductDetailResponseIPaginate>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ProductsGet(
          page,
          size,
          name,
          createAt,
          categoryIds,
          minPrice,
          maxPrice,
          sortBy,
          isAsc,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductApi.apiV1ProductsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ProductsIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetProductDetailResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ProductsIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductApi.apiV1ProductsIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {UpdateProductRequest} [updateProductRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ProductsIdPatch(
      id: string,
      updateProductRequest?: UpdateProductRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetProductResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ProductsIdPatch(
          id,
          updateProductRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductApi.apiV1ProductsIdPatch"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {Array<DeleteImageProductRequest>} [request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ProductsIdProductImageDelete(
      id: string,
      request?: Array<DeleteImageProductRequest>,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetProductResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ProductsIdProductImageDelete(
          id,
          request,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductApi.apiV1ProductsIdProductImageDelete"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {Array<AddImageProductRequest>} [request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ProductsIdProductImagePost(
      id: string,
      request?: Array<AddImageProductRequest>,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetProductResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ProductsIdProductImagePost(
          id,
          request,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductApi.apiV1ProductsIdProductImagePost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} name
     * @param {string} description
     * @param {number} price
     * @param {number} quantity
     * @param {number} volume
     * @param {boolean} isHidden
     * @param {File} mainImage
     * @param {Array<string>} [categoryIds]
     * @param {Array<File>} [secondaryImages]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ProductsPost(
      name: string,
      description: string,
      price: number,
      quantity: number,
      volume: number,
      isHidden: boolean,
      mainImage: File,
      categoryIds?: Array<string>,
      secondaryImages?: Array<File>,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetProductResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ProductsPost(
          name,
          description,
          price,
          quantity,
          volume,
          isHidden,
          mainImage,
          categoryIds,
          secondaryImages,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProductApi.apiV1ProductsPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ProductApiFp(configuration);
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [name]
     * @param {string} [createAt]
     * @param {Array<string>} [categoryIds]
     * @param {number} [minPrice]
     * @param {number} [maxPrice]
     * @param {string} [sortBy]
     * @param {boolean} [isAsc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsGet(
      page?: number,
      size?: number,
      name?: string,
      createAt?: string,
      categoryIds?: Array<string>,
      minPrice?: number,
      maxPrice?: number,
      sortBy?: string,
      isAsc?: boolean,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetProductDetailResponseIPaginate> {
      return localVarFp
        .apiV1ProductsGet(
          page,
          size,
          name,
          createAt,
          categoryIds,
          minPrice,
          maxPrice,
          sortBy,
          isAsc,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetProductDetailResponse> {
      return localVarFp
        .apiV1ProductsIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {UpdateProductRequest} [updateProductRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsIdPatch(
      id: string,
      updateProductRequest?: UpdateProductRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetProductResponse> {
      return localVarFp
        .apiV1ProductsIdPatch(id, updateProductRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {Array<DeleteImageProductRequest>} [request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsIdProductImageDelete(
      id: string,
      request?: Array<DeleteImageProductRequest>,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetProductResponse> {
      return localVarFp
        .apiV1ProductsIdProductImageDelete(id, request, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {Array<AddImageProductRequest>} [request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsIdProductImagePost(
      id: string,
      request?: Array<AddImageProductRequest>,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetProductResponse> {
      return localVarFp
        .apiV1ProductsIdProductImagePost(id, request, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} name
     * @param {string} description
     * @param {number} price
     * @param {number} quantity
     * @param {number} volume
     * @param {boolean} isHidden
     * @param {File} mainImage
     * @param {Array<string>} [categoryIds]
     * @param {Array<File>} [secondaryImages]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProductsPost(
      name: string,
      description: string,
      price: number,
      quantity: number,
      volume: number,
      isHidden: boolean,
      mainImage: File,
      categoryIds?: Array<string>,
      secondaryImages?: Array<File>,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<GetProductResponse> {
      return localVarFp
        .apiV1ProductsPost(
          name,
          description,
          price,
          quantity,
          volume,
          isHidden,
          mainImage,
          categoryIds,
          secondaryImages,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [name]
   * @param {string} [createAt]
   * @param {Array<string>} [categoryIds]
   * @param {number} [minPrice]
   * @param {number} [maxPrice]
   * @param {string} [sortBy]
   * @param {boolean} [isAsc]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductApi
   */
  public apiV1ProductsGet(
    page?: number,
    size?: number,
    name?: string,
    createAt?: string,
    categoryIds?: Array<string>,
    minPrice?: number,
    maxPrice?: number,
    sortBy?: string,
    isAsc?: boolean,
    options?: RawAxiosRequestConfig
  ) {
    return ProductApiFp(this.configuration)
      .apiV1ProductsGet(
        page,
        size,
        name,
        createAt,
        categoryIds,
        minPrice,
        maxPrice,
        sortBy,
        isAsc,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductApi
   */
  public apiV1ProductsIdGet(id: string, options?: RawAxiosRequestConfig) {
    return ProductApiFp(this.configuration)
      .apiV1ProductsIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {UpdateProductRequest} [updateProductRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductApi
   */
  public apiV1ProductsIdPatch(
    id: string,
    updateProductRequest?: UpdateProductRequest,
    options?: RawAxiosRequestConfig
  ) {
    return ProductApiFp(this.configuration)
      .apiV1ProductsIdPatch(id, updateProductRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {Array<DeleteImageProductRequest>} [request]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductApi
   */
  public apiV1ProductsIdProductImageDelete(
    id: string,
    request?: Array<DeleteImageProductRequest>,
    options?: RawAxiosRequestConfig
  ) {
    return ProductApiFp(this.configuration)
      .apiV1ProductsIdProductImageDelete(id, request, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {Array<AddImageProductRequest>} [request]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductApi
   */
  public apiV1ProductsIdProductImagePost(
    id: string,
    request?: Array<AddImageProductRequest>,
    options?: RawAxiosRequestConfig
  ) {
    return ProductApiFp(this.configuration)
      .apiV1ProductsIdProductImagePost(id, request, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} name
   * @param {string} description
   * @param {number} price
   * @param {number} quantity
   * @param {number} volume
   * @param {boolean} isHidden
   * @param {File} mainImage
   * @param {Array<string>} [categoryIds]
   * @param {Array<File>} [secondaryImages]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProductApi
   */
  public apiV1ProductsPost(
    name: string,
    description: string,
    price: number,
    quantity: number,
    volume: number,
    isHidden: boolean,
    mainImage: File,
    categoryIds?: Array<string>,
    secondaryImages?: Array<File>,
    options?: RawAxiosRequestConfig
  ) {
    return ProductApiFp(this.configuration)
      .apiV1ProductsPost(
        name,
        description,
        price,
        quantity,
        volume,
        isHidden,
        mainImage,
        categoryIds,
        secondaryImages,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * StaffApi - axios parameter creator
 * @export
 */
export const StaffApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {StaffType} [type]
     * @param {string} [username]
     * @param {string} [phoneNumber]
     * @param {string} [sortBy]
     * @param {boolean} [isAsc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1StaffsGet: async (
      page?: number,
      size?: number,
      type?: StaffType,
      username?: string,
      phoneNumber?: string,
      sortBy?: string,
      isAsc?: boolean,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/staffs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (type !== undefined) {
        localVarQueryParameter["Type"] = type;
      }

      if (username !== undefined) {
        localVarQueryParameter["Username"] = username;
      }

      if (phoneNumber !== undefined) {
        localVarQueryParameter["PhoneNumber"] = phoneNumber;
      }

      if (sortBy !== undefined) {
        localVarQueryParameter["sortBy"] = sortBy;
      }

      if (isAsc !== undefined) {
        localVarQueryParameter["isAsc"] = isAsc;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1StaffsIdGet: async (
      id: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1StaffsIdGet", "id", id);
      const localVarPath = `/api/v1/staffs/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {UpdateStaffRequest} [updateStaffRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1StaffsIdPatch: async (
      id: string,
      updateStaffRequest?: UpdateStaffRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1StaffsIdPatch", "id", id);
      const localVarPath = `/api/v1/staffs/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateStaffRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateStaffRequest} [createStaffRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1StaffsPost: async (
      createStaffRequest?: CreateStaffRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/staffs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createStaffRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * StaffApi - functional programming interface
 * @export
 */
export const StaffApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = StaffApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {StaffType} [type]
     * @param {string} [username]
     * @param {string} [phoneNumber]
     * @param {string} [sortBy]
     * @param {boolean} [isAsc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1StaffsGet(
      page?: number,
      size?: number,
      type?: StaffType,
      username?: string,
      phoneNumber?: string,
      sortBy?: string,
      isAsc?: boolean,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<StaffResponseIPaginate>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1StaffsGet(
        page,
        size,
        type,
        username,
        phoneNumber,
        sortBy,
        isAsc,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StaffApi.apiV1StaffsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1StaffsIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StaffResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1StaffsIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StaffApi.apiV1StaffsIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {UpdateStaffRequest} [updateStaffRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1StaffsIdPatch(
      id: string,
      updateStaffRequest?: UpdateStaffRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StaffResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1StaffsIdPatch(
          id,
          updateStaffRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StaffApi.apiV1StaffsIdPatch"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateStaffRequest} [createStaffRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1StaffsPost(
      createStaffRequest?: CreateStaffRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StaffResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1StaffsPost(
        createStaffRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StaffApi.apiV1StaffsPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * StaffApi - factory interface
 * @export
 */
export const StaffApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = StaffApiFp(configuration);
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {StaffType} [type]
     * @param {string} [username]
     * @param {string} [phoneNumber]
     * @param {string} [sortBy]
     * @param {boolean} [isAsc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1StaffsGet(
      page?: number,
      size?: number,
      type?: StaffType,
      username?: string,
      phoneNumber?: string,
      sortBy?: string,
      isAsc?: boolean,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<StaffResponseIPaginate> {
      return localVarFp
        .apiV1StaffsGet(
          page,
          size,
          type,
          username,
          phoneNumber,
          sortBy,
          isAsc,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1StaffsIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<StaffResponse> {
      return localVarFp
        .apiV1StaffsIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {UpdateStaffRequest} [updateStaffRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1StaffsIdPatch(
      id: string,
      updateStaffRequest?: UpdateStaffRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<StaffResponse> {
      return localVarFp
        .apiV1StaffsIdPatch(id, updateStaffRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateStaffRequest} [createStaffRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1StaffsPost(
      createStaffRequest?: CreateStaffRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<StaffResponse> {
      return localVarFp
        .apiV1StaffsPost(createStaffRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * StaffApi - object-oriented interface
 * @export
 * @class StaffApi
 * @extends {BaseAPI}
 */
export class StaffApi extends BaseAPI {
  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {StaffType} [type]
   * @param {string} [username]
   * @param {string} [phoneNumber]
   * @param {string} [sortBy]
   * @param {boolean} [isAsc]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StaffApi
   */
  public apiV1StaffsGet(
    page?: number,
    size?: number,
    type?: StaffType,
    username?: string,
    phoneNumber?: string,
    sortBy?: string,
    isAsc?: boolean,
    options?: RawAxiosRequestConfig
  ) {
    return StaffApiFp(this.configuration)
      .apiV1StaffsGet(
        page,
        size,
        type,
        username,
        phoneNumber,
        sortBy,
        isAsc,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StaffApi
   */
  public apiV1StaffsIdGet(id: string, options?: RawAxiosRequestConfig) {
    return StaffApiFp(this.configuration)
      .apiV1StaffsIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {UpdateStaffRequest} [updateStaffRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StaffApi
   */
  public apiV1StaffsIdPatch(
    id: string,
    updateStaffRequest?: UpdateStaffRequest,
    options?: RawAxiosRequestConfig
  ) {
    return StaffApiFp(this.configuration)
      .apiV1StaffsIdPatch(id, updateStaffRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateStaffRequest} [createStaffRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StaffApi
   */
  public apiV1StaffsPost(
    createStaffRequest?: CreateStaffRequest,
    options?: RawAxiosRequestConfig
  ) {
    return StaffApiFp(this.configuration)
      .apiV1StaffsPost(createStaffRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
